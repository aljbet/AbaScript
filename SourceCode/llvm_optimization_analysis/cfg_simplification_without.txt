LLVM IR
=========
; ModuleID = 'AbaScript'
source_filename = "AbaScript"

@0 = private unnamed_addr constant [6 x i8] c"%I64d\00", align 1

define i32 @"$print"(i64 %x) {
entry:
  %0 = alloca i64, align 8
  store i64 %x, ptr %0, align 4
  %print.buffer = alloca ptr, align 8
  %1 = bitcast i32 4096 to i32
  %mallocsize = mul i32 %1, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i32)
  %malloccall = tail call ptr @malloc(i32 %mallocsize)
  %2 = bitcast ptr %malloccall to ptr
  store ptr %2, ptr %print.buffer, align 8
  %3 = load ptr, ptr %print.buffer, align 8
  %4 = load i64, ptr %0, align 4
  %5 = call i32 (ptr, ptr, ...) @sprintf(ptr %3, ptr @0, i64 %4)
  %6 = call i32 @puts(ptr %3)
  tail call void @free(ptr %3)
  ret i32 0
}

declare i32 @puts(ptr)

declare noalias ptr @malloc(i32)

declare i32 @sprintf(ptr, ptr, ...)

declare void @free(ptr)

define i64 @main() {
entry:
  %0 = trunc i64 10000 to i32
  %mallocsize = mul i32 %0, ptrtoint (ptr getelementptr (i64, ptr null, i32 1) t
                                                                               to i32)
  %malloccall = tail call ptr @malloc(i32 %mallocsize)
  %1 = bitcast ptr %malloccall to ptr
  %x = alloca i64, align 8
  store ptr %1, ptr %x, align 8
  %n = alloca i64, align 8
  store i64 10000, ptr %n, align 4
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  %j = alloca i64, align 8
  store i64 0, ptr %j, align 4
  store i64 0, ptr %i, align 4
  br label %forCond

forCond:                                          ; preds = %forInc, %entry     
  %2 = load i64, ptr %i, align 4
  %3 = load i64, ptr %n, align 4
  %4 = icmp slt i64 %2, %3
  br i1 %4, label %forBody, label %afterFor

forBody:                                          ; preds = %forCond
  %5 = load i64, ptr %i, align 4
  %6 = load ptr, ptr %x, align 8
  %7 = getelementptr i64, ptr %6, i64 %5
  store i64 1, ptr %7, align 4
  br label %forInc

forInc:                                           ; preds = %forBody
  %8 = load i64, ptr %i, align 4
  %9 = add i64 %8, 1
  store i64 %9, ptr %i, align 4
  br label %forCond

afterFor:                                         ; preds = %forCond
  store i64 2, ptr %i, align 4
  br label %forCond1

forCond1:                                         ; preds = %forInc3, %afterFor 
  %10 = load i64, ptr %i, align 4
  %11 = load i64, ptr %i, align 4
  %12 = mul i64 %10, %11
  %13 = load i64, ptr %n, align 4
  %14 = icmp sle i64 %12, %13
  br i1 %14, label %forBody2, label %afterFor4

forBody2:                                         ; preds = %forCond1
  %15 = load i64, ptr %i, align 4
  %16 = load ptr, ptr %x, align 8
  %17 = getelementptr i64, ptr %16, i64 %15
  %18 = load i64, ptr %17, align 4
  %19 = icmp eq i64 %18, 1
  %ifcond = icmp ne i1 %19, false
  br i1 %ifcond, label %then, label %else

forInc3:                                          ; preds = %merge
  %20 = load i64, ptr %i, align 4
  %21 = add i64 %20, 1
  store i64 %21, ptr %i, align 4
  br label %forCond1

afterFor4:                                        ; preds = %forCond1
  store i64 2, ptr %i, align 4
  br label %forCond9

then:                                             ; preds = %forBody2
  %22 = load i64, ptr %i, align 4
  %23 = load i64, ptr %i, align 4
  %24 = mul i64 %22, %23
  store i64 %24, ptr %j, align 4
  br label %forCond5

else:                                             ; preds = %forBody2
  br label %merge

merge:                                            ; preds = %else, %afterFor8   
  br label %forInc3

forCond5:                                         ; preds = %forInc7, %then     
  %25 = load i64, ptr %j, align 4
  %26 = load i64, ptr %n, align 4
  %27 = icmp slt i64 %25, %26
  br i1 %27, label %forBody6, label %afterFor8

forBody6:                                         ; preds = %forCond5
  %28 = load i64, ptr %j, align 4
  %29 = load ptr, ptr %x, align 8
  %30 = getelementptr i64, ptr %29, i64 %28
  store i64 0, ptr %30, align 4
  br label %forInc7

forInc7:                                          ; preds = %forBody6
  %31 = load i64, ptr %j, align 4
  %32 = load i64, ptr %i, align 4
  %33 = add i64 %31, %32
  store i64 %33, ptr %j, align 4
  br label %forCond5

afterFor8:                                        ; preds = %forCond5
  br label %merge

forCond9:                                         ; preds = %forInc11, %afterFor
                                                                               r4
  %34 = load i64, ptr %i, align 4
  %35 = load i64, ptr %n, align 4
  %36 = icmp slt i64 %34, %35
  br i1 %36, label %forBody10, label %afterFor12

forBody10:                                        ; preds = %forCond9
  %37 = load i64, ptr %i, align 4
  %38 = load ptr, ptr %x, align 8
  %39 = getelementptr i64, ptr %38, i64 %37
  %40 = load i64, ptr %39, align 4
  %41 = icmp eq i64 %40, 1
  %ifcond13 = icmp ne i1 %41, false
  br i1 %ifcond13, label %then14, label %else15

forInc11:                                         ; preds = %merge16
  %42 = load i64, ptr %i, align 4
  %43 = add i64 %42, 1
  store i64 %43, ptr %i, align 4
  br label %forCond9

afterFor12:                                       ; preds = %forCond9
  br i1 false, label %then17, label %else18

then14:                                           ; preds = %forBody10
  %44 = load i64, ptr %i, align 4
  %45 = call i32 @"$print"(i64 %44)
  br label %merge16

else15:                                           ; preds = %forBody10
  br label %merge16

merge16:                                          ; preds = %else15, %then14    
  br label %forInc11

then17:                                           ; preds = %afterFor12
  %46 = call i32 @"$print"(i64 1000)
  br label %merge19

else18:                                           ; preds = %afterFor12
  br label %merge19

merge19:                                          ; preds = %else18, %then17    
  ret i64 0
}
